radial.plot(MatRadial,label.pos=pos_vec,rp.type="p",
labels=Subjects,main="This Class Data Science Skills",
line.col=c("red","black","blue"),
radial.lim=c(1,2.5,5,7.5,10), radial.labels=c("","","5","","10"), lwd=c(2,3,2))
### Lets add the legend. The first 2 numbers are the (x,y) position. (0,0) is the center of the plot.
### bty="n" makes no box around it
legend(-15,7,legend=c("0.25 quantile","mean","0.75 quantile"),fill=c("red","black","blue"), bty="n")
WHY <- data.frame( cbind(students$become.a.data.scientist, students$work.with.data.scientist, students$work.for.a.data.scientist, students$manage.a.data.scientist ) )
names(WHY) <- c("Become DS", "Work with DS", "Work for DS", "Manage DS")
WHY <- ( WHY > 5 )
colMeans(WHY, na.rm = TRUE)
WHY
##########################
##### Call Centers
##### Load Call center data
CC <- read.csv("CallCentersNovember.csv", header=TRUE)
##########################
##### Call Centers
##### Load Call center data
CC <- read.csv(choose.files(),headers=TRUE)
##########################
##### Call Centers
##### Load Call center data
CC <- read.csv(choose.files(),header=TRUE)
# Just to pick set up the upper limit of the labels of the histograms
# (this will not show the large outliers that would distort the figure)
serLimit <- quantile(CC$ser_time, probs = 0.99 )
qLimit <- quantile(CC$q_time, probs = 0.99 )
# Plotting subsample of 500
plot(CC$q_time[1:500],CC$ser_time[1:500], xlim =  c(0,qLimit), xlab="Waiting Time",  ylab="Service Time", ylim =  c(0,serLimit))
# Not very good to visualize relations
# Plotting the histograms
hist(CC$ser_time, breaks = 1000, xlim =  c(0,serLimit), xlab="Service Time",main="Histogram of Service Time")
hist(CC$q_time, breaks = 1000, xlim =  c(0,qLimit), xlab="Waiting Time",main="Histogram of Waiting Time")
head(CC)
# Just to pick set up the upper limit of the labels of the histograms
# (this will not show the large outliers that would distort the figure)
serLimit <- quantile(CC$ser_time, probs = 0.99 )
qLimit <- quantile(CC$q_time, probs = 0.99 )
# Plotting subsample of 500
plot(CC$q_time[1:500],CC$ser_time[1:500], xlim =  c(0,qLimit), xlab="Waiting Time",  ylab="Service Time", ylim =  c(0,serLimit))
# Not very good to visualize relations
# Plotting the histograms
hist(CC$ser_time, breaks = 1000, xlim =  c(0,serLimit), xlab="Service Time",main="Histogram of Service Time")
hist(CC$q_time, breaks = 1000, xlim =  c(0,qLimit), xlab="Waiting Time",main="Histogram of Waiting Time")
# Big values at 0 in both. Do they mean the same?
# Lets compute proportions
n <- length( CC$ser_time )
PropNoService <- sum(  CC$ser_time == 0 )/n
PropNoWait    <- sum(  CC$q_time == 0 )/n
PropNoNo      <- sum(  CC$q_time == 0 & CC$ser_time == 0)/n
PropNoWaitSer <- sum(  CC$q_time == 0 & CC$ser_time > 0)/n
# 36.0% queue was empty and served
#  4.6% queue was empty but not served customer hang up
# 40.6%
# 17.8% agent hang up
## Plot square Venn Diagrams (area represents size)
## fix the plot
plot(0, type="n", xlim=c(48,63), ylim=c(48,63), bty="n", xlab="", xaxt="n", yaxt="n", ylab="", asp=1)
### colors picked for transparency (the last 2 digits, 95 and 35, control the amount of transparency)
colors <- c("#ffff0095", "#ff000035")
Adjx <- (100*PropNoNo/sqrt(PropNoService*100)) -(sqrt(PropNoWait*100)/2)-(sqrt(PropNoService*100)/2)
# drawing squares (length of the side is given by the square-root of the area we want)
symbols(c(55+Adjx,55), c(55,55), squares=c(sqrt(PropNoService*100),sqrt(PropNoWait*100)), add=TRUE, bg=colors, fg=colors, inches=FALSE)
# Labels
text(c(50,56.5), c(55,55), c("No Service\n 17.8%","No Wait \n 40.6%"),cex=1.5,font=4)
Adjx <-(100*PropNoNo/sqrt(PropNoService*100))/2-(sqrt(PropNoWait*100)/2)
Adjy <- (3/4)*(sqrt(PropNoService*100)/2)
# the command lines draws on the same graph you had (i.e. does not create a new graph)
lines(c(55+Adjx,55+Adjx),c(55+Adjy,57.8+Adjy),type="l",lwd=2,col="black")
lines(c(55+2*Adjx,55+2*Adjx),c(55+Adjy,57.6+Adjy),type="l",lwd=2,col="black")
# labels
text(c(55+Adjx/6,55+3*Adjx), c(58+Adjy,58+Adjy), c("Hang up\n when free \n 4.6%","Hang up\n when busy\n 13.2%"),cex=1.5,font=4)
rm(list = ls())
cat("\014")
library(foreign)
library(car)
library(gplots)
library(lmtest)
library(psych)
library(dplyr)
library(plyr)
library(ggplot2)
library(plm)
library(class)
library(ggpubr)
library(factoextra)
whr <- read.csv(choose.files())
whr$Covid <- ifelse(whr$year>2019, 1, 0)
whr <- subset(whr, select = -c(X, ct))
whr_2017 <- whr[ which(whr$year==2017), ]
whr_2018 <- whr[ which(whr$year==2018), ]
whr_2019 <- whr[ which(whr$year==2019), ]
whr_2020 <- whr[ which(whr$year==2020), ]
whr_2021 <- whr[ which(whr$year==2021), ]
whr.p <- pdata.frame(whr, index=c("Country.name","year"))
whr_after2017 <- whr[ which(whr$year>2016), ]
whr_after2017.p <- pdata.frame(whr_after2017, index=c("Country.name","year"))
#DD plot
whr.all <- aggregate(whr, by = list(whr$year), FUN=mean)
ggplot(whr.all, aes(x=year,y=Life.Ladder,group=factor(Covid),colour=factor(Covid))) +
geom_line() +
scale_x_continuous(breaks=pretty(whr.all$year,n=1))+
labs(x="Year",y="Life.Ladder")+
scale_color_discrete(name="Covid",labels=c("Before Covid","Covid"))
# direct OLS: pooled regression
pooled <- plm(Life.Ladder ~ Log.GDP.per.capita+Social.support+Healthy.life.expectancy.at.birth+Freedom.to.make.life.choices+Covid
,data = whr.p, model="pooling")
summary(pooled)
# FD modelm, year 2017-2021
row_drop <- c(whr_after2017.p$Country.name %in% c('Iran','Venezuela','Malta','Cyprus','Kosovo','Taiwan Province of China','Tajikistan'))
whr_after2017.p_small <- whr_after2017.p[!row_drop,]
whr_after2017.p_small <- subset(whr_after2017.p_small, select = -c(Perceptions.of.corruption,Positive.affect,Negative.affect))
FD <- plm(Life.Ladder ~ Log.GDP.per.capita+Social.support+Healthy.life.expectancy.at.birth+Freedom.to.make.life.choices+Covid
,data = whr_after2017.p_small, model="fd")
summary(FD)
# Unbalanced FE models, year after 2013
DD1_plm <- plm(Life.Ladder ~ Log.GDP.per.capita+Social.support+Healthy.life.expectancy.at.birth+Freedom.to.make.life.choices+Covid
, data=whr.p, model="within",effect="twoways")
summary(DD1_plm)
DD2_lm_with_trends <- lm(Life.Ladder ~ Log.GDP.per.capita+Social.support+Healthy.life.expectancy.at.birth+Freedom.to.make.life.choices
+factor(Country.name)+ factor(Covid), data=whr.p)
summary(DD2_lm_with_trends)
#EDA for differences in life ladder between 2019 and 2020
difference_ladder <- whr_2020$Life.Ladder-whr_2019$Life.Ladder
whr_2020_with_ladder <- whr_2020
whr_2020_with_ladder$Difference <- difference_ladder
whr_2020_with_ladder$Country.name
region <- c("E","A","AP","E","AP","E","SSA","A","E","A","E","AP","SSA","A","A","AP","A","E","E","E","A","A","MENA","A","E","SSA","E","E","E","E","SSA","E","E","AP","AP","E","MENA","E","MENA","AP","MENA","AP","SSA","E","AP","AP","E","E","E","SSA","A","E","AP","E","MENA","AP","SSA","E","AP","SSA","E","E","AP","E","E","E","MENA","E","E","E","SSA","AP","E","E","E","AP","AP","SSA","AP","MENA","E","SSA","E","MENA","E","A","A","A","SSA","SSA")
length(region)
#Cluster analysis
whr_2020_with_ladder$Region <- region
whr_2020_with_ladder
#New dataframe with relevant columns
new_data <- data.frame(whr_2020_with_ladder$Country.name,whr_2020_with_ladder$Life.Ladder,whr_2020_with_ladder$Difference,whr_2020_with_ladder$Region)
new_data
plot( new_data$whr_2020_with_ladder.Life.Ladder,new_data$whr_2020_with_ladder.Difference,
pch = 19,
col = factor(new_data$whr_2020_with_ladder.Region), ylab=("Difference in Happiness index between 2019 and 2020") , xlab=("Life Ladder"))
#Legend
legend("topright",
legend = levels(factor(new_data$whr_2020_with_ladder.Region)),
pch = 19,
col = factor(levels(factor(new_data$whr_2020_with_ladder.Region))))
whr_2020
whr_2020$Country.name
dummy_2020 <- c(1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,1,1,1,0,1,0,1,1,0,0,0,1,1,0,1,0,1,0,1,1,0,1,1,0,1,0,0,0,0,0,0,1,0,0,1,1,0,1,0,1,0,0,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,0,1,0,0,0,1,0,1,1,0,0,0,0)
length(dummy_2020)
whr_2020$Dummy_for_2020 <- dummy_2020
whr_2020
#Defining names
varlist <- c("Life.Ladder" = "Life Ladder",
"Log.GDP.per.capita" = "Log(GDP/capita)",
"Social.support" = "Social.Support",
"Healthy.life.expectancy.at.birth"="Life expenctancy",
"Freedom.to.make.life.choices"="Freedom",
"Covid"= "Covid")
head(whr_2020)
whr_2020%>%
select(Life.Ladder, one_of(names(varlist))) %>%
gather(response, value, -Life.Ladder, na.rm = TRUE) %>%
mutate(response = recode(response, !!!as.list(varlist))) %>%
ggplot(aes(x = Life.Ladder, y = value)) +
geom_point() +
geom_smooth(mapping = aes(group = Life.Ladder), se = FALSE, method = "lm",
formula = y ~ poly(x, 2)) +
geom_smooth(mapping = aes(group = Life.Ladder), se = FALSE, method = "lm",
formula = y ~ x, color = "black") +
facet_grid(response ~ ., scales = "free_y") +
labs(y = "", x = "Life Ladder")
#Implementing regression discontinuity for all variables
AllRD<- lm(Life.Ladder ~ Freedom.to.make.life.choices+Healthy.life.expectancy.at.birth+Social.support+Log.GDP.per.capita+ Dummy_for_2020,data=whr_2020)
summary(AllRD)
#Checking for importance of healthy life expectancy and covid dummy variables with different variables to test significance
LifeRD<- lm(Life.Ladder ~ Healthy.life.expectancy.at.birth+Dummy_for_2020,data=whr_2020)
summary(LifeRD)
FreedomRD<- lm(Freedom.to.make.life.choices ~ Healthy.life.expectancy.at.birth+Dummy_for_2020,data=whr_2020)
summary(FreedomRD)
GDPRD<- lm(Log.GDP.per.capita ~ Healthy.life.expectancy.at.birth+Dummy_for_2020,data=whr_2020)
summary(GDPRD)
SocialRD<- lm(Social.support ~ Healthy.life.expectancy.at.birth+ Dummy_for_2020,data=whr_2020)
summary(SocialRD)
#Difference in difference analysis, dividing according to regions
#Starting eda
#Regression
whr_2019_new <- whr_2019
whr_2019_new$Dummy_for_2020 <- dummy_2020
whr_2019_new$Region <- region
whr_2020_new <- whr_2020
whr_2020_new$Region <- region
did_data <- rbind(whr_2020_new,whr_2019_new)
head(did_data)
did_data$post <- 0
did_data <- did_data %>%
mutate(poste = if_else(did_data$year == 2020, 1,0))
view(did_data)
lm1 #Final plots
view(did_data)
head(did_data)
#Linear regression for DiD
did_lm <- lm(Life.Ladder ~ poste+Dummy_for_2020+(poste*Dummy_for_2020), data=did_data)
summary(did_lm)
head(did_data)
did_lm2 <- lm(Life.Ladder ~ poste+Dummy_for_2020+(poste*Dummy_for_2020)+Log.GDP.per.capita+Social.Support+Healthy.life.expectancy.at.birth+Freedom.to.make.life.choices+Generosity, data=did_data)
did_lm2 <- lm(Life.Ladder ~ poste+Dummy_for_2020+(poste*Dummy_for_2020)+Log.GDP.per.capita+Social.support+Healthy.life.expectancy.at.birth+Freedom.to.make.life.choices+Generosity, data=did_data)
summary(did_lm2)
did_lm2 <- lm(Life.Ladder ~ poste+Dummy_for_2020+(poste*Dummy_for_2020)+Log.GDP.per.capita+Social.support+Freedom.to.make.life.choices+Generosity, data=did_data)
summary(did_lm2)
#Linear regression for DiD
did_lm <- lm(Life.Ladder ~ poste+Dummy_for_2020+(poste*Dummy_for_2020), data=did_data[did_data$Region=="A"])
summary(did_lm)
#Linear regression for DiD
did_lm <- lm(Life.Ladder ~ poste+Dummy_for_2020+(poste*Dummy_for_2020), data=did_data[did_data$region=="A"])
did_data_americas <- did_data %>% filter(did_data$Region=="A")
#Linear regression for DiD in Americas
did_lm <- lm(Life.Ladder ~ poste+Dummy_for_2020+(poste*Dummy_for_2020), data=did_data_americas)
summary(did_lm)
did_lm2 <- lm(Life.Ladder ~ poste+Dummy_for_2020+(poste*Dummy_for_2020)+Log.GDP.per.capita+Social.support+Freedom.to.make.life.choices+Generosity, data=did_data_americas)
summary(did_lm2)
#Linear regression for DiD in europe
did_lm <- lm(Life.Ladder ~ poste+Dummy_for_2020+(poste*Dummy_for_2020), data=did_data_europe)
did_data_americas <- did_data %>% filter(did_data$Region=="A")
did_data_asia <- did_data %>% filter(did_data$Region=="AP")
did_data_europe <- did_data %>% filter(did_data$Region=="E")
did_data_mena <- did_data %>% filter(did_data$Region=="MENA")
did_data_ssa <- did_data %>% filter(did_data$Region=="SSA")
#Linear regression for DiD in europe
did_lm <- lm(Life.Ladder ~ poste+Dummy_for_2020+(poste*Dummy_for_2020), data=did_data_europe)
summary(did_lm)
did_lm2 <- lm(Life.Ladder ~ poste+Dummy_for_2020+(poste*Dummy_for_2020)+Log.GDP.per.capita+Social.support+Freedom.to.make.life.choices+Generosity, data=did_data_europe)
summary(did_lm2)
#Linear regression for DiD in MENA
did_lm <- lm(Life.Ladder ~ poste+Dummy_for_2020+(poste*Dummy_for_2020), data=did_data_mena)
summary(did_lm)
did_lm2 <- lm(Life.Ladder ~ poste+Dummy_for_2020+(poste*Dummy_for_2020)+Log.GDP.per.capita+Social.support+Freedom.to.make.life.choices+Generosity, data=did_data_mena)
summary(did_lm2)
#Linear regression for DiD in Asia Pacific
did_lm <- lm(Life.Ladder ~ poste+Dummy_for_2020+(poste*Dummy_for_2020), data=did_data_asia)
summary(did_lm)
did_lm2 <- lm(Life.Ladder ~ poste+Dummy_for_2020+(poste*Dummy_for_2020)+Log.GDP.per.capita+Social.support+Freedom.to.make.life.choices+Generosity, data=did_data_asia)
summary(did_lm2)
#Linear regression for DiD in SSA
did_lm <- lm(Life.Ladder ~ poste+Dummy_for_2020+(poste*Dummy_for_2020), data=did_data_ssa)
summary(did_lm)
did_lm2 <- lm(Life.Ladder ~ poste+Dummy_for_2020+(poste*Dummy_for_2020)+Log.GDP.per.capita+Social.support+Freedom.to.make.life.choices+Generosity, data=did_data_ssa)
summary(did_lm2)
#Linear regression for DiD for all regions
did_lm <- lm(Life.Ladder ~ poste+Dummy_for_2020+(poste*Dummy_for_2020), data=did_data)
summary(did_lm)
did_lm2 <- lm(Life.Ladder ~ poste+Dummy_for_2020+(poste*Dummy_for_2020)+Log.GDP.per.capita+Social.support+Freedom.to.make.life.choices+Generosity, data=did_data)
summary(did_lm2)
whr_2020%>%
select(Life.Ladder, one_of(names(varlist))) %>%
gather(response, value, -Life.Ladder, na.rm = TRUE) %>%
mutate(response = recode(response, !!!as.list(varlist))) %>%
ggplot(aes(x = Life.Ladder, y = value)) +
geom_point() +
geom_smooth(mapping = aes(group = Life.Ladder), se = FALSE, method = "lm",
formula = y ~ poly(x, 2)) +
geom_smooth(mapping = aes(group = Life.Ladder), se = FALSE, method = "lm",
formula = y ~ x, color = "black") +
facet_grid(response ~ ., scales = "free_y") +
labs(y = "", x = "Life Ladder")
plot( new_data$whr_2020_with_ladder.Life.Ladder,new_data$whr_2020_with_ladder.Difference,
pch = 19,
col = factor(new_data$whr_2020_with_ladder.Region), ylab=("Difference in Happiness index between 2019 and 2020") , xlab=("Life Ladder"))
#Legend
legend("topright",
legend = levels(factor(new_data$whr_2020_with_ladder.Region)),
pch = 19,
col = factor(levels(factor(new_data$whr_2020_with_ladder.Region))))
#Regression for did
#Formula used : Life Ladder ~ Post (2020 and 2019 controls) + Treatment (Dummy for 2020 specifying if covid reached a country in 2020 by march or not) + Treatment*Post
#Also checked by adding other controls like GDP etc.
# No significant results found
whr_2019_new <- whr_2019
whr_2019_new$Dummy_for_2020 <- dummy_2020
whr_2019_new$Region <- region
whr_2020_new <- whr_2020
whr_2020_new$Region <- region
did_data <- rbind(whr_2020_new,whr_2019_new)
head(did_data)
did_data$post <- 0
did_data <- did_data %>%
mutate(poste = if_else(did_data$year == 2020, 1,0))
head(did_data)
did_data_americas <- did_data %>% filter(did_data$Region=="A")
did_data_asia <- did_data %>% filter(did_data$Region=="AP")
did_data_europe <- did_data %>% filter(did_data$Region=="E")
did_data_mena <- did_data %>% filter(did_data$Region=="MENA")
did_data_ssa <- did_data %>% filter(did_data$Region=="SSA")
#Linear regression for DiD for all regions
did_lm <- lm(Life.Ladder ~ poste+Dummy_for_2020+(poste*Dummy_for_2020), data=did_data)
summary(did_lm)
did_lm2 <- lm(Life.Ladder ~ poste+Dummy_for_2020+(poste*Dummy_for_2020)+Log.GDP.per.capita+Social.support+Freedom.to.make.life.choices+Generosity, data=did_data)
summary(did_lm2)
#Linear regression for DiD in Americas
did_lm <- lm(Life.Ladder ~ poste+Dummy_for_2020+(poste*Dummy_for_2020), data=did_data_americas)
summary(did_lm)
did_lm2 <- lm(Life.Ladder ~ poste+Dummy_for_2020+(poste*Dummy_for_2020)+Log.GDP.per.capita+Social.support+Freedom.to.make.life.choices+Generosity, data=did_data_americas)
summary(did_lm2)
#Linear regression for DiD in europe
did_lm <- lm(Life.Ladder ~ poste+Dummy_for_2020+(poste*Dummy_for_2020), data=did_data_europe)
summary(did_lm)
did_lm2 <- lm(Life.Ladder ~ poste+Dummy_for_2020+(poste*Dummy_for_2020)+Log.GDP.per.capita+Social.support+Freedom.to.make.life.choices+Generosity, data=did_data_europe)
summary(did_lm2)
#Linear regression for DiD in MENA
did_lm <- lm(Life.Ladder ~ poste+Dummy_for_2020+(poste*Dummy_for_2020), data=did_data_mena)
summary(did_lm)
did_lm2 <- lm(Life.Ladder ~ poste+Dummy_for_2020+(poste*Dummy_for_2020)+Log.GDP.per.capita+Social.support+Freedom.to.make.life.choices+Generosity, data=did_data_mena)
summary(did_lm2)
#Linear regression for DiD in Asia Pacific
did_lm <- lm(Life.Ladder ~ poste+Dummy_for_2020+(poste*Dummy_for_2020), data=did_data_asia)
summary(did_lm)
did_lm2 <- lm(Life.Ladder ~ poste+Dummy_for_2020+(poste*Dummy_for_2020)+Log.GDP.per.capita+Social.support+Freedom.to.make.life.choices+Generosity, data=did_data_asia)
summary(did_lm2)
#Difference in difference analysis, dividing according to regions
#Data cleaning
whr_2019_new <- whr_2019
whr_2019_new$Dummy_for_2020 <- dummy_2020
whr_2019_new$Region <- region
whr_2020_new <- whr_2020
whr_2020_new$Region <- region
did_data <- rbind(whr_2020_new,whr_2019_new)
head(did_data)
did_data$post <- 0
did_data <- did_data %>%
mutate(poste = if_else(did_data$year == 2020, 1,0))
head(did_data)
ggplot(did_data, aes(poste, Life.Ladder, color = Dummy_for_2020)) +
stat_summary(geom = 'line') +
geom_vline(xintercept = 1994) +
theme_minimal()
ggplot(did_data, aes(poste, Life.Ladder, color = Dummy_for_2020)) +
stat_summary(geom = 'line') +
theme_minimal()
ggplot(did_data, aes(Life.Ladder,poste, color = Dummy_for_2020)) +
stat_summary(geom = 'line') +
theme_minimal()
#Data cleaning
whr_2019_new <- whr_2019
whr_2019_new$Dummy_for_2020 <- dummy_2020
whr_2019_new$Region <- region
whr_2020_new <- whr_2020
whr_2020_new$Region <- region
did_data <- rbind(whr_2020_new,whr_2019_new)
head(did_data)
did_data$post <- 0
did_data <- did_data %>%
mutate(poste = if_else(did_data$year == 2020, 1,0))
head(did_data)
ggplot(did_data, aes(poste, Life.Ladder, color = Dummy_for_2020)) +
stat_summary(geom = 'line') +
geom_vline(xintercept = 1994) +
theme_minimal()
ggplot(did_data, aes(poste, Life.Ladder, color = Dummy_for_2020)) +
stat_summary(geom = 'line') +
theme_minimal()
ggplot(did_data, aes(poste, Life.Ladder, color = Region)) +
stat_summary(geom = 'line') +
theme_minimal()
ggplot(did_data, aes(poste, Life.Ladder)) +
stat_summary(geom = 'line') +
theme_minimal()
#Starting eda
#impacted countries data
did_data_impacted <- did_data %>% filter(did_data$Dummy_for_2020 =1)
#Starting eda
#impacted countries data
did_data_impacted <- did_data %>% filter(did_data$Dummy_for_2020 ==1)
ggplot(did_data_impacted, aes(poste, Life.Ladder)) +
stat_summary(geom = 'line') +
theme_minimal()
ggplot(did_data_impacted, aes(poste, Life.Ladder), color="Red") +
stat_summary(geom = 'line') +
theme_minimal()
ggplot(did_data_impacted, aes(poste, Life.Ladder), color=redblue()) +
stat_summary(geom = 'line') +
theme_minimal()
ggplot(did_data_impacted, aes(poste, Life.Ladder), color=red) +
stat_summary(geom = 'line') +
theme_minimal()
ggplot(did_data_impacted, aes(poste, Life.Ladder), color="blue") +
stat_summary(geom = 'line') +
theme_minimal()
did_data_not_impacted <- did_data %>% filter(did_data$Dummy_for_2020 ==0)
ggplot(did_data_impacted, aes(poste, Life.Ladder), color="blue") +
ggplot(did_data_not_impacted, aes(poste, Life.Ladder), color="red")
ggplot(did_data_impacted, aes(poste, Life.Ladder), color="blue") +
geom_line(did_data_not_impacted, aes(poste, Life.Ladder), color="red")
ggplot(did_data_impacted, aes(poste, Life.Ladder), color="blue") +
geom_line( aes(poste, Life.Ladder), color="red")
ggplot(did_data_not_impacted, aes(poste, Life.Ladder), color="blue") +
stat_summary(geom = 'line') +
theme_minimal()
ggplot(did_data_not_impacted, aes(poste, Life.Ladder), color="red") +
stat_summary(geom = 'line') +
theme_minimal()
did_data_not_impacted <- did_data %>% filter(did_data$Dummy_for_2020 ==0)
did_data_impacted
view(did_data_impacted)
View(did_data_impacted)
View(did_data_not_impacted)
ggplot(did_data_impacted, aes(poste, Life.Ladder), color="blue", xlab="change") +
stat_summary(geom = 'line') +
theme_minimal()
ggplot(did_data_not_impacted, aes(poste, Life.Ladder), color="red") +
stat_summary(geom = 'line') +
theme_minimal()
ggplot(did_data_impacted, aes(poste, Life.Ladder), color="blue", xlab="change") +
stat_summary(geom = 'line') +
theme_minimal()
ggplot(did_data_impacted, aes(poste, Life.Ladder), color="blue", xlab="change") +
stat_summary(geom = 'line') +
theme_minimal()
ggplot(did_data_not_impacted, aes(poste, Life.Ladder), color="red") +
stat_summary(geom = 'line') +
theme_minimal()
ggplot(did_data_impacted, aes(Dummy_for_2020, Life.Ladder), color="blue", xlab="change") +
stat_summary(geom = 'line') +
theme_minimal()
shiny::runApp('TSA')
runApp('TSA')
runApp('TSA')
runApp('TSA')
runApp('TSA')
runApp('TSA')
runApp('TSA')
runApp()
runApp('TSA')
runApp('TSA')
runApp('TSA')
runApp('TSA')
runApp()
runApp('TSA')
runApp('TSA')
##Web scrapping lots of data
footy_set <- read.csv(paste0('http://www.football-data.co.uk/mmz4281/',
'3',
'/',
'E',
'0',
'.csv'))
runApp('TSA')
##Web scrapping lots of data
footy_set <- read.csv(paste0('http://www.football-data.co.uk/mmz4281/',
'15-16',
'/',
'E',
'0',
'.csv'))
head(footy_set)
##Web scrapping lots of data
footy_set <- read.csv(paste0('http://www.football-data.co.uk/mmz4281/',
'21-22',
'/',
'E',
'0',
'.csv'))
head(footy_set)
runApp('TSA')
runApp('TSA')
view(footy_set)
colnames(footy_set)
footy_set[, unique(HomeTeam)
footy_set[, unique(HomeTeam)]
choices = sort(unique(c(footy_set[, unique(HomeTeam)],
footy_set[, unique(AwayTeam)])))
choices = sort(unique(c(footy_set[, unique(footy_set$HomeTeam)],
footy_set[, unique(AwayTeam)])))
choices = sort(unique(c(footy_set[, unique(footy_set$HomeTeam)],
footy_set[, unique(AwayTeam)])))
##Web scrapping lots of data
footy_set <- read.csv(paste0('http://www.football-data.co.uk/mmz4281/',
'21-22',
'/',
'E',
'0',
'.csv'))
head(footy_set)
colnames(footy_set)
choices = sort(unique(c(footy_set[, unique(footy_set$HomeTeam)],
footy_set[, unique(AwayTeam)])))
choices = sort(unique(c(footy_set[, HomeTeam],
footy_set[, unique(AwayTeam)])))
footy_set$HomeTeam
unique(footy_set$HomeTeam)
choices = sort(unique(c(unique(footy_set$HomeTeam),
footy_set[, unique(AwayTeam)])))
choices = sort(unique(c(unique(footy_set$HomeTeam),
unique(footy_set$AwayTeam))))
choices
runApp('TSA')
runApp()
runApp('TSA')
shiny::runApp('TSA')
##Web scrapping lots of data
footy_set <- read.csv(paste0('http://www.football-data.co.uk/mmz4281/',
'21-22',
'/',
'E',
'0',
'.csv'))
head(footy_set)
choices = sort(unique(c(unique(footy_set$HomeTeam),
unique(footy_set$AwayTeam))))
choices
colnames(footy_set)
runApp('TSA')
runApp('TSA')
runApp()
runApp('TSA')
